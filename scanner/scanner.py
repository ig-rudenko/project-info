import os
import pathlib
import re
from typing import List

import tabulate

from .types import FileInfo, ScanResult
from .formats import format_bytes, Colors
from .ignores import IGNORE_EXTENSIONS, IGNORE_FILENAMES, get_gitignore


def find_files(base_dir: pathlib.Path, gitignore_list: list, result_files: list) -> None:
    """
    –ò—â–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ base_dir
    """

    for p in base_dir.glob("*"):
        for gi in gitignore_list:
            if re.findall(re.compile(gi), p.as_posix()):
                break
        else:
            if p.is_file():
                result_files.append(p)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª

            elif p.is_dir():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–∞–ø–∫–µ —Ñ–∞–π–ª—ã
                find_files(p, gitignore_list, result_files)


def inspect_file(file: pathlib.Path) -> FileInfo:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """

    file_info = FileInfo()

    if file.suffix in IGNORE_EXTENSIONS:
        return file_info

    if file.name in IGNORE_FILENAMES:
        return file_info

    file_info.size = file.stat().st_size

    try:
        with file.open(encoding="utf8") as f:
            data = f.readlines()
    except UnicodeDecodeError:
        return file_info

    for line in data:
        file_info.symbols += len(re.findall(r"\S", line))

        if file.suffix == ".py" and re.match(r"^\s*#|^\s*$", line):
            continue
        elif file.suffix == ".js" and re.match(r"^\s*//|^\s*$", line):
            continue
        elif re.match(r"^\s*$", line):
            continue

        file_info.lines += 1

    return file_info


def scan_files(files: List[pathlib.Path]) -> dict[str, ScanResult]:
    files_types: dict[str, ScanResult] = {}

    for file in files:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã

        if not file.suffix:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞

        files_types.setdefault(file.suffix, ScanResult.create_empty())
        file_info: FileInfo = inspect_file(file)

        files_types[file.suffix].lines += file_info.lines
        files_types[file.suffix].symbols += file_info.symbols
        files_types[file.suffix].size += file_info.size

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ –æ–¥–∏–Ω
        files_types[file.suffix].count += 1

    return files_types


def start_scan(base_dir: pathlib.Path, use_gitignore: bool = True):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""

    print(
        Colors.OKGREEN,
        "üîé –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é",
        base_dir.resolve().absolute().as_posix() + Colors.ENDC,
    )
    os.chdir(base_dir)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    base_dir = pathlib.Path(".")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞

    files_to_scan = []

    # –°–ø–∏—Å–æ–∫ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏, —á—Ç–æ –Ω–∞–¥–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    gitignore_list = get_gitignore(base_dir) if use_gitignore else ["^\\.git$", "^\\.idea$"]

    # –ò—â–µ–º —Ñ–∞–π–ª—ã
    find_files(base_dir, gitignore_list, files_to_scan)

    files_scan_result = scan_files(files_to_scan)

    output = []
    # –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
    lines_total_sum = sum([v.lines for v in files_scan_result.values()])
    # –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    symbols_total_sum = sum([v.symbols for v in files_scan_result.values()])
    # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    total_size = sum([v.size for v in files_scan_result.values()])

    for suffix, val in files_scan_result.items():
        lines_percent = round(val.lines * 100 / lines_total_sum, 2)
        symbols_percent = round(val.symbols * 100 / symbols_total_sum, 2)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        # —Ç–∏–ø —Ñ–∞–π–ª–∞, –∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤, –∫–æ–ª-–≤–æ –ª–∏–Ω–∏–π, –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—Ü–µ–Ω—Ç
        output.append(
            [
                suffix,
                val.count,
                val.lines,
                lines_percent,
                val.symbols,
                symbols_percent,
                format_bytes(val.size),
            ]
        )

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–ª-–≤—É —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    # –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ, —Ç–æ –ø–æ –∫–æ–ª-–≤—É –ª–∏–Ω–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    output = sorted(output, key=lambda x: x[2], reverse=True)  # –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª-–≤—É —Å—Ç—Ä–æ–∫
    output = sorted(output, key=lambda x: x[1], reverse=True)  # –ó–∞—Ç–µ–º –ø–æ –∫–æ–ª-–≤—É —Ñ–∞–π–ª–æ–≤

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print()
    print(
        tabulate.tabulate(
            output,
            headers=["–¢–∏–ø —Ñ–∞–π–ª–∞", "–§–∞–π–ª–æ–≤", "–°—Ç—Ä–æ—á–µ–∫", "%", "–°–∏–º–≤–æ–ª–æ–≤", "%", "–†–∞–∑–º–µ—Ä"],
        )
    )
    print(f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫:    {lines_total_sum:,d}".replace(",", " "))
    print(f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {symbols_total_sum:,d}".replace(",", " "))
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:          {format_bytes(total_size)}")
