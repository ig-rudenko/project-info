import re
import os
import pathlib
import tabulate
from argparse import ArgumentParser


IGNORE_EXTENSIONS = ['.svg']  # –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ


class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def get_gitignore(base_dir: pathlib.Path):
    """
    –ò—â–µ–º —Ñ–∞–π–ª .gitignore –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    gitignore_file = base_dir / '.gitignore'
    data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

    if gitignore_file.exists():

        print(Colors.HEADER, '–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .gitignore' + Colors.ENDC)

        with gitignore_file.open() as file:
            data = file.readlines()  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã

        for i, line in enumerate(data):
            if line.startswith('!'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ñ–∞–π–ª—ã, —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                data.remove(line)
                continue

            # –°–æ–∑–¥–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            line = '^' + line

            if line.endswith('/'):
                line = line[:-1]

            line = line.replace('.', r'\.')
            line = line.replace('*', '.*').replace('\n', '$')

            data[i] = line

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ ".git", ".idea", "venv"
    return ['^\\.git$', '^\\.idea$', '^venv$'] + data


def find_files(base_dir: pathlib.Path, gitignore_list: list, result_files: list):
    """
    –ò—â–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ base_dir
    """

    for p in base_dir.glob('*'):
        for gi in gitignore_list:
            if re.findall(re.compile(gi), p.as_posix()):
                break
        else:
            if p.is_file():
                result_files.append(p)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª

            elif p.is_dir():
                find_files(p, gitignore_list, result_files)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–∞–ø–∫–µ —Ñ–∞–π–ª—ã


def inspect_file(file: pathlib.Path):
    """
    –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """

    file_info = {
        'lines': 0,
        'symbols': 0
    }

    if file.suffix in IGNORE_EXTENSIONS:
        return file_info

    try:
        with file.open(encoding="utf8") as f:
            data = f.readlines()
    except UnicodeDecodeError:
        return file_info

    for line in data:
        file_info['symbols'] += len(re.findall(r'\S', line))

        if file.suffix == '.py' and re.findall(r'^\s*#|^\s*$', line):
            continue
        elif file.suffix == '.pyc':
            continue
        elif file.suffix == '.js' and re.findall(r'^\s*//|^\s*$', line):
            continue
        elif re.findall(r'^\s*$', line):
            continue

        file_info['lines'] += 1

    return file_info


def start_scan(base_dir: pathlib.Path, use_gitignore: bool = True):
    """ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ """

    print(Colors.OKGREEN, 'üîé –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', base_dir.absolute().as_posix() + Colors.ENDC)
    os.chdir(base_dir)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    base_dir = pathlib.Path('.')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞

    files_to_scan = []

    # –°–ø–∏—Å–æ–∫ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏, —á—Ç–æ –Ω–∞–¥–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    gitignore_list = get_gitignore(base_dir) if use_gitignore else ['^\\.git$', '^\\.idea$']

    find_files(base_dir, gitignore_list, files_to_scan)  # –ò—â–µ–º —Ñ–∞–π–ª—ã

    files_types = {}

    for file in files_to_scan:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã

        if not file.suffix:
            continue   # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞

        files_types.setdefault(file.suffix, {})

        file_info: dict = inspect_file(file)
        # print(file, file_info)

        for key in file_info.keys():
            # print(files_types[file.suffix].get(key, 0))

            # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            files_types[file.suffix][key] = files_types[file.suffix].get(key, 0) + file_info[key]

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ –æ–¥–∏–Ω
        files_types[file.suffix]['count'] = files_types[file.suffix].get('count', 0) + 1

    output = []
    lines_total_sum = sum([v['lines'] for v in files_types.values()])  # –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
    symbols_total_sum = sum([v['symbols'] for v in files_types.values()])  # –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤

    for suffix, val in files_types.items():

        lines_percent = round(val['lines'] * 100 / lines_total_sum, 2)
        symbols_percent = round(val['symbols'] * 100 / symbols_total_sum, 2)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        # —Ç–∏–ø —Ñ–∞–π–ª–∞, –∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤, –∫–æ–ª-–≤–æ –ª–∏–Ω–∏–π, –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—Ü–µ–Ω—Ç
        output.append(
            [suffix, val['count'], val['lines'], lines_percent, val['symbols'], symbols_percent]
        )

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–ª-–≤—É —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    # –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ, —Ç–æ –ø–æ –∫–æ–ª-–≤—É –ª–∏–Ω–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    output = sorted(output, key=lambda x: x[2], reverse=True)  # –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª-–≤—É —Å—Ç—Ä–æ–∫
    output = sorted(output, key=lambda x: x[1], reverse=True)  # –ó–∞—Ç–µ–º –ø–æ –∫–æ–ª-–≤—É —Ñ–∞–π–ª–æ–≤

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print()
    print(
        tabulate.tabulate(
            output,
            headers=[
                '–¢–∏–ø —Ñ–∞–π–ª–∞', '–§–∞–π–ª–æ–≤', '–°—Ç—Ä–æ—á–µ–∫', '%', '–°–∏–º–≤–æ–ª–æ–≤', '%'
            ],
        )
    )


if __name__ == '__main__':
    parser = ArgumentParser(description='–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∏—â–µ—Ç —Ñ–∞–π–ª—ã', usage='%(prog)s [--full] directory')
    parser.add_argument(
        '--full', action='store_const', const=True, default=False,
        help='–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ .gitignore —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç—Å—è'
    )
    parser.add_argument('directory', help='–ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º')
    args = parser.parse_args()

    try:
        start_scan(pathlib.Path(args.directory), not args.full)
    except KeyboardInterrupt:
        print(Colors.WARNING, '\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞', Colors.ENDC)
